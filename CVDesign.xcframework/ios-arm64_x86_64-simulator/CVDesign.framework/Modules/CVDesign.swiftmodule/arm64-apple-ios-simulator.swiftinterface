// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CVDesign
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import CVDesign
import Combine
import DeveloperToolsSupport
import Foundation
import JTAppleCalendar
import Kingfisher
import MJRefresh
import SnapKit
import Swift
import SwiftUI
import SwifterSwift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVCalendar : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var datas: [Swift.String]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var didSelectedDate: ((_ date: Foundation.Date) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var cancelClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var applyClick: ((_ date: Foundation.Date) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var selectedDate: Foundation.Date {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency convenience public init(minimumDate: Foundation.Date?, maximumDate: Foundation.Date?)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CVCalendar : JTAppleCalendar.JTACMonthViewDataSource {
  @_Concurrency.MainActor @preconcurrency public func configureCalendar(_ calendar: JTAppleCalendar.JTACMonthView) -> JTAppleCalendar.ConfigurationParameters
}
extension CVCalendar : JTAppleCalendar.JTACMonthViewDelegate {
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, willDisplay cell: JTAppleCalendar.JTACDayCell, forItemAt date: Foundation.Date, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, cellForItemAt date: Foundation.Date, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath) -> JTAppleCalendar.JTACDayCell
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, didSelectDate date: Foundation.Date, cell: JTAppleCalendar.JTACDayCell?, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, didDeselectDate date: Foundation.Date, cell: JTAppleCalendar.JTACDayCell?, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, didScrollToDateSegmentWith visibleDates: JTAppleCalendar.DateSegmentInfo)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVAdapterBaseView : UIKit.UIView, CVViewLifeCycleProtocol, CVTableViewHeaderFooterLifeCycleProtocol, CVCollectionReusableViewLifeCycleProtocol {
  @_Concurrency.MainActor @preconcurrency open var protocolsVMO: [ViewMappingObject]?
  @_Concurrency.MainActor @preconcurrency open var indexPath: Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency open func cellForRowAt(indexPath: Foundation.IndexPath, targetView: UIKit.UIView, model: Any, eventTransmissionBlock: CVEventTransmissionBlock?)
  @_Concurrency.MainActor @preconcurrency open func cellWillReuse(with identifier: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func cellWillReuse(with identifier: Swift.String, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency open func cellWillAppear()
  @_Concurrency.MainActor @preconcurrency open func cellDidDisappear()
  @_Concurrency.MainActor @preconcurrency open var section: Swift.Int?
  @_Concurrency.MainActor @preconcurrency open var type: CVAdapterViewType?
  @_Concurrency.MainActor @preconcurrency open func headerFooter(for section: Swift.Int, in tableView: UIKit.UITableView, model: Any, type: CVAdapterViewType, eventTransmissionBlock: CVEventTransmissionBlock?)
  @_Concurrency.MainActor @preconcurrency open func headerFooterViewWillReuse(with identifier: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func headerFooterViewWillAppear(with type: CVAdapterViewType)
  @_Concurrency.MainActor @preconcurrency open func headerFooterViewDidDisAppear(with type: CVAdapterViewType)
  @_Concurrency.MainActor @preconcurrency open var kind: Swift.String?
  @_Concurrency.MainActor @preconcurrency open func reusableView(for collectionView: UIKit.UICollectionView, indexPath: Foundation.IndexPath, kind: Swift.String, model: Any, eventTransmissionBlock: CVEventTransmissionBlock?)
  @_Concurrency.MainActor @preconcurrency open func reusableViewWillReuse(with identifier: Swift.String, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency open func reusableViewWillAppear()
  @_Concurrency.MainActor @preconcurrency open func reusableViewDidDisappear()
  @_Concurrency.MainActor @preconcurrency open var eventTransmissionBlock: CVEventTransmissionBlock?
  @_Concurrency.MainActor @preconcurrency weak open var targetView: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency open var model: Any?
  @_Concurrency.MainActor @preconcurrency open func addAutoDistributionModel(view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  @_Concurrency.MainActor @preconcurrency open func replaceAt(index: Swift.Int, autoDistributionModel view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  @_Concurrency.MainActor @preconcurrency open func removeAutoDistributionModelViewAt(index: Swift.Int)
  @_Concurrency.MainActor @preconcurrency open func removeAutoDistributionModelView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVGroup<Header, Content, Footer> : CVBaseView where Header : UIKit.UIView, Content : UIKit.UIView, Footer : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public let header: Header
  @_Concurrency.MainActor @preconcurrency final public let content: Content
  @_Concurrency.MainActor @preconcurrency final public let footer: Footer
  @_Concurrency.MainActor @preconcurrency public init(header: Header, content: Content, footer: Footer)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func addTapGestureRecognizer(action: (() -> Swift.Void)?)
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func wrap(edge: UIKit.UIEdgeInsets = UIEdgeInsets(top: .spacingWithSemantic("spacing/spacing-xl"),
                                                left: .spacingWithSemantic("spacing/spacing-xl"),
                                                bottom: .spacingWithSemantic("spacing/spacing-xl"),
                                                right: .spacingWithSemantic("spacing/spacing-xl")), radius: CoreFoundation.CGFloat = .spacingWithSemantic("radius/radius-2xl"), backgroundColor: UIKit.UIColor = .colorWithSemantic("background color/bg-primary"), bottomConstraintPriority: SnapKit.ConstraintPriority = .low) -> UIKit.UIView
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVDashLineView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var direction: UIKit.NSLayoutConstraint.Axis {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var lineColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.Date {
  public func formattedWithOrdinalSuffix(_ formatString: Swift.String = "MMM d") -> Swift.String
}
public typealias ScrollViewDidScrollBlock = (_ scrollView: UIKit.UIScrollView) -> Swift.Void
public typealias ScrollViewDidZoomBlock = (_ scrollView: UIKit.UIScrollView) -> Swift.Void
public typealias ScrollViewWillBeginDraggingBlock = (_ scrollView: UIKit.UIScrollView) -> Swift.Void
public typealias ScrollViewWillEndDraggingBlock = (_ scrollView: UIKit.UIScrollView, _ velocity: CoreFoundation.CGPoint, _ targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>) -> Swift.Void
public typealias ScrollViewDidEndDraggingBlock = (_ scrollView: UIKit.UIScrollView, _ decelerate: Swift.Bool) -> Swift.Void
public typealias ScrollViewWillBeginDeceleratingBlock = (_ scrollView: UIKit.UIScrollView) -> Swift.Void
public typealias ScrollViewDidEndDeceleratingBlock = (_ scrollView: UIKit.UIScrollView) -> Swift.Void
public typealias ScrollViewDidEndScrollingAnimationBlock = (_ scrollView: UIKit.UIScrollView) -> Swift.Void
public typealias ViewForZoomingBlock = (_ scrollView: UIKit.UIScrollView) -> UIKit.UIView?
public typealias ScrollViewWillBeginZoomingBlock = (_ scrollView: UIKit.UIScrollView, _ view: UIKit.UIView?) -> Swift.Void
public typealias ScrollViewDidEndZoomingBlock = (_ scrollView: UIKit.UIScrollView, _ view: UIKit.UIView?, _ scale: CoreFoundation.CGFloat) -> Swift.Void
public typealias ScrollViewShouldScrollToTopBlock = (_ scrollView: UIKit.UIScrollView) -> Swift.Bool
public typealias ScrollViewDidScrollToTopBlock = (_ scrollView: UIKit.UIScrollView) -> Swift.Void
public typealias ScrollViewDidChangeAdjustedContentInsetBlock = (_ scrollView: UIKit.UIScrollView) -> Swift.Void
@objc @_inheritsConvenienceInitializers open class ScrollListener : ObjectiveC.NSObject {
  open var scrollViewDidScrollBlock: ScrollViewDidScrollBlock?
  open var scrollViewDidZoomBlock: ScrollViewDidZoomBlock?
  open var scrollViewWillBeginDraggingBlock: ScrollViewWillBeginDraggingBlock?
  open var scrollViewWillEndDraggingBlock: ScrollViewWillEndDraggingBlock?
  open var scrollViewDidEndDraggingBlock: ScrollViewDidEndDraggingBlock?
  open var scrollViewWillBeginDeceleratingBlock: ScrollViewWillBeginDeceleratingBlock?
  open var scrollViewDidEndDeceleratingBlock: ScrollViewDidEndDeceleratingBlock?
  open var scrollViewDidEndScrollingAnimationBlock: ScrollViewDidEndScrollingAnimationBlock?
  open var viewForZoomingBlock: ViewForZoomingBlock?
  open var scrollViewWillBeginZoomingBlock: ScrollViewWillBeginZoomingBlock?
  open var scrollViewDidEndZoomingBlock: ScrollViewDidEndZoomingBlock?
  open var scrollViewShouldScrollToTopBlock: ScrollViewShouldScrollToTopBlock?
  open var scrollViewDidScrollToTopBlock: ScrollViewDidScrollToTopBlock?
  open var scrollViewDidChangeAdjustedContentInsetBlock: ScrollViewDidChangeAdjustedContentInsetBlock?
  @objc override dynamic public init()
  @objc deinit
}
public enum CVGoalTaskStatusType {
  case notStarted
  case ongoing
  case completed
  case uncompleted
  public static func == (a: CVGoalTaskStatusType, b: CVGoalTaskStatusType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVGoalTaskStatusCardView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var type: CVGoalTaskStatusType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var desc: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public let cvScreenW: CoreFoundation.CGFloat
public let cvScreenH: CoreFoundation.CGFloat
public struct CVDesign {
}
extension CVDesign {
  public static let bottomSafeAreaInset: CoreFoundation.CGFloat
  public static let navigationBarHeight: CoreFoundation.CGFloat
  public static func navStatusHeight() -> CoreFoundation.CGFloat
  public static func statusBarHeight() -> CoreFoundation.CGFloat
  public static func statusBarWidth() -> CoreFoundation.CGFloat
  public static func statusBarSize() -> CoreFoundation.CGSize
  public static func keyWindow() -> UIKit.UIWindow?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVCircularProgressRing : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var progress: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var segments: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var outerColors: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var innerColors: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var outerLineWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var innerLineWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var segmentSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconURL: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
public protocol CVOptionItem : Swift.Equatable {
  var title: Swift.String { get }
  var value: Swift.String { get }
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVOptionsSelectBottomSheetView<T> : CVBaseView where T : CVOptionItem {
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var buttonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var didConfirmSelect: (([T]) -> ())?
  @_Concurrency.MainActor @preconcurrency public init(options: [T], selectedOption: T? = nil)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @objc deinit
}
extension FSPopoverView {
  @_Concurrency.MainActor @preconcurrency public static func fs_appearance() -> FSPopoverViewAppearance
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVBaseTableViewCell : CVTableViewCell, CVViewInitProtocol {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func setupUI()
  @_Concurrency.MainActor @preconcurrency open func layoutUI()
  @objc deinit
}
extension CVBaseTableViewCell {
  @_Concurrency.MainActor @preconcurrency public var cvSection: CVSection? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isLast: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isLastInAllSections: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isFirst: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var tableView: UIKit.UITableView? {
    get
  }
}
extension CVTableViewHeaderFooterView {
  @_Concurrency.MainActor @preconcurrency public var cvSection: CVSection? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isLast: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isFirst: Swift.Bool {
    get
  }
}
public struct CVAlertAction {
  public init(title: Swift.String?, style: CVButton.CVButtonHierarchyType = .primaryBrand, handler: (() -> Swift.Void)?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVAlertViewController : CVBasePopupViewController {
  @_Concurrency.MainActor @preconcurrency public var closeButtonBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var checkBoxHandler: ((_ isSelected: Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public func showAlert(target: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency public func dismissAlert(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency convenience public init(image: UIKit.UIImage?, title: Swift.String?, message: Swift.String?, attributedMessage: Foundation.NSAttributedString? = nil, checkBoxTitle: Swift.String? = nil, hideClose: Swift.Bool = false, actions: [CVAlertAction])
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol FSPopoverViewAnimatedTransitioning : AnyObject {
  func animateTransition(transitionContext context: FSPopoverViewTransitionContext)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVAudioTrackCardType1 : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var onClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconURL: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var type: CVAudioTrackCardType1_TypeLabel.CVAudioTrackCardType1_TypeLabelType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var typeText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var duration: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVAudioTrackCardType1_TypeLabel : CVBaseView {
  public enum CVAudioTrackCardType1_TypeLabelType : Swift.String {
    case music
    case whiteNoise
    case meditation
    case guidance
    case podCast
    case nature
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var cvType: CVAudioTrackCardType1_TypeLabel.CVAudioTrackCardType1_TypeLabelType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var cvTypeText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var cvTimeText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var typeLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVSleepTrackFooter : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var onUnlockRequested: ((_ footerView: CVSleepTrackFooter) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var startText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var endText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setLoadingStatus(img: UIKit.UIImage, title: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var iconPadding: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CVSleepTrackFooter {
  @_Concurrency.MainActor @preconcurrency public func reset()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVSelectFieldRadio : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var allClick: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var radius: CVSelectFieldRadio.CVSelectFieldRadiusSize {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconURL: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconPosition: CVSelectFieldRadio.CVSelectFieldIconPosition {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconSize: CVSelectFieldRadio.CVSelectFieldIconSize {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var tagText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var descriptionText: Swift.String? {
    get
    set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var type: CVSelectFieldRadio.CVSelectFieldCheckBoxStyle {
    get
    set
  }
  public enum CVSelectFieldCheckBoxStyle {
    case singleChoice
    case customChoice(UIKit.UIImage, UIKit.UIImage)
    case multipleChoice
    case none
  }
  public enum CVSelectFieldIconPosition {
    case left
    case top
    public static func == (a: CVSelectFieldRadio.CVSelectFieldIconPosition, b: CVSelectFieldRadio.CVSelectFieldIconPosition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CVSelectFieldIconSize {
    case lg
    case sm
    case none
    public static func == (a: CVSelectFieldRadio.CVSelectFieldIconSize, b: CVSelectFieldRadio.CVSelectFieldIconSize) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CVSelectFieldRadiusSize {
    case half
    case full
    public static func == (a: CVSelectFieldRadio.CVSelectFieldRadiusSize, b: CVSelectFieldRadio.CVSelectFieldRadiusSize) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var unBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var checkBoxSelectBlock: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVSleepGlance : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var tipClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setGlanceData(startDate: Foundation.Date, endDate: Foundation.Date, sleepStages: [CVSleepGlance.ChartItem])
  @_Concurrency.MainActor @preconcurrency public func setGlanceItemData(datas: [CVSleepGlance.GlanceItem])
  public struct ChartItem {
    public init(duration: CoreFoundation.CGFloat, color: UIKit.UIColor)
  }
  public struct GlanceItem {
    public init(color: UIKit.UIColor, title: Swift.String, rate: Swift.String, value: Swift.String)
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CVMilestoneItemProgressModel {
  public let progress: Swift.Double
  public let status: Swift.Int
  public init(progress: Swift.Double, status: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVMilestoneView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var goalView: CVMyGoalTagView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var segments: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var progress: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var topInfoClickBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var editBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var dataSource: [CVMilestoneItemProgressModel] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency public func configure(description: Swift.String, points: Swift.String, percentage: Swift.String, progressColor: UIKit.UIColor = .colorWithSemantic("ultitity color/utility-brand-200"))
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CVMilestoneView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
public enum CVAdapterViewType : Swift.Int {
  case HeaderType
  case CellType
  case FooterType
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVTableViewHeaderFooterView : UIKit.UITableViewHeaderFooterView, CVTableViewHeaderFooterLifeCycleProtocol {
  @_Concurrency.MainActor @preconcurrency open var indexPath: Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency open var kind: Swift.String?
  @_Concurrency.MainActor @preconcurrency open var protocolsVMO: [ViewMappingObject]?
  @_Concurrency.MainActor @preconcurrency open var section: Swift.Int?
  @_Concurrency.MainActor @preconcurrency open var type: CVAdapterViewType?
  @_Concurrency.MainActor @preconcurrency open var eventTransmissionBlock: CVEventTransmissionBlock?
  @_Concurrency.MainActor @preconcurrency weak open var targetView: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency open var model: Any?
  @_Concurrency.MainActor @preconcurrency open func headerFooter(for section: Swift.Int, in tableView: UIKit.UITableView, model: Any, type: CVAdapterViewType, eventTransmissionBlock: CVEventTransmissionBlock?)
  @_Concurrency.MainActor @preconcurrency open func headerFooterViewWillReuse(with identifier: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func headerFooterViewWillAppear(with type: CVAdapterViewType)
  @_Concurrency.MainActor @preconcurrency open func headerFooterViewDidDisAppear(with type: CVAdapterViewType)
  @_Concurrency.MainActor @preconcurrency open func addAutoDistributionModel(view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  @_Concurrency.MainActor @preconcurrency open func replaceAt(index: Swift.Int, autoDistributionModel view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  @_Concurrency.MainActor @preconcurrency open func removeAutoDistributionModelViewAt(index: Swift.Int)
  @_Concurrency.MainActor @preconcurrency open func removeAutoDistributionModelView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol CVBottomSheetType1TitleProtocol {
  var cv_select_title: Swift.String { get }
  var cv_icon_url: Swift.String? { get }
}
extension CVBottomSheetType1TitleProtocol {
  public var cv_icon_url: Swift.String? {
    get
  }
}
public enum SelectionModeType {
  case radio
  case multipleChoices
  public static func == (a: SelectionModeType, b: SelectionModeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVBottomSheetType1 : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var isSingleButton: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selectTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selectTitleColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var radius: CVSelectFieldRadio.CVSelectFieldRadiusSize
  @_Concurrency.MainActor @preconcurrency public var dataSourceArray: [any CVBottomSheetType1TitleProtocol] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hasSelectedArray: [any CVBottomSheetType1TitleProtocol] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var applyBlock: (([any CVBottomSheetType1TitleProtocol]) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var cancelBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var customSelectImage: ((UIKit.UIImage, UIKit.UIImage))?
  @_Concurrency.MainActor @preconcurrency public var tableViewHeight: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var confirmButtonTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selectionMode: SelectionModeType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class CVBottomSheetType1Model {
  public var select: Swift.Bool
  public var radius: CVSelectFieldRadio.CVSelectFieldRadiusSize
  public var selectionMode: SelectionModeType
  public var checkBoxSelectBlock: ((Swift.Bool) -> Swift.Void)?
  public var dataModel: (any CVBottomSheetType1TitleProtocol)?
  public var customSelectImage: ((UIKit.UIImage, UIKit.UIImage))?
  public var noneBgColor: UIKit.UIColor?
  public var cellBgColor: UIKit.UIColor?
  public init()
  @objc deinit
}
extension CVBottomSheetType1Model : CVTableViewCellModelProtocol {
  public func cellClass(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  public func cellHeigh(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVBottomSheetType1Cell : CVBaseTableViewCell {
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency override public func cellForRowAt(indexPath: Foundation.IndexPath, targetView: UIKit.UIView, model: Any, eventTransmissionBlock: CVEventTransmissionBlock?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency public class CVImageTitleValueView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var iconImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var valueColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String, alpha: CoreFoundation.CGFloat = 1.0)
  public static func colorWithSemantic(_ name: Swift.String, _ alpha: CoreFoundation.CGFloat = 1) -> UIKit.UIColor
  public static func alphaColorWithSemantic(_ name: Swift.String) -> UIKit.UIColor
  public static func lerp(a: CoreFoundation.CGFloat, b: CoreFoundation.CGFloat, fraction: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  public static func blend(from: UIKit.UIColor, to: UIKit.UIColor, fraction: CoreFoundation.CGFloat) -> UIKit.UIColor
}
extension CoreFoundation.CGFloat {
  public static func spacingWithSemantic(_ name: Swift.String) -> CoreFoundation.CGFloat
  public static func typographyWithSemantic(_ name: Swift.String) -> CoreFoundation.CGFloat
}
extension UIKit.UIImage {
  public static func imageNamed(_ named: Swift.String) -> UIKit.UIImage
  public func tintedImagePreservingWhite(with color: UIKit.UIColor) -> UIKit.UIImage?
  public func changeSpecificColor(to newColor: UIKit.UIColor?, targetColor: UIKit.UIColor) -> UIKit.UIImage?
}
public enum CVThemeType : Swift.String {
  case normal
  case dark
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CVDesignThemeManager {
  public static let shared: CVDesignThemeManager
  public func setTheme(semanticData: Foundation.Data, primitiveData: Foundation.Data, typographyData: Foundation.Data)
  public func reset()
  @objc deinit
}
public protocol CVViewInitProtocol {
  func setupUI()
  func layoutUI()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVProgressBar : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var progress: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var radius: CVProgressBar.CVProgressBarLineCap {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var lineWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isCustomProgressTitle: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var customProgressTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var progressColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var label: CVProgressBar.CVProgressBarLabelStyle {
    get
    set
  }
  public enum CVProgressBarLineCap : Swift.CaseIterable {
    case round
    case square
    public static func == (a: CVProgressBar.CVProgressBarLineCap, b: CVProgressBar.CVProgressBarLineCap) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVProgressBar.CVProgressBarLineCap]
    nonisolated public static var allCases: [CVProgressBar.CVProgressBarLineCap] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CVProgressBarLabelStyle : Swift.CaseIterable {
    case none
    case right
    case bottom
    case topFloating
    case bottomFloating
    public static func == (a: CVProgressBar.CVProgressBarLabelStyle, b: CVProgressBar.CVProgressBarLabelStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVProgressBar.CVProgressBarLabelStyle]
    nonisolated public static var allCases: [CVProgressBar.CVProgressBarLabelStyle] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency public class CVCountdownTimeView : CVBaseView {
  public enum CVCountdownTimeViewStyle {
    case blue
    case white
    public static func == (a: CVCountdownTimeView.CVCountdownTimeViewStyle, b: CVCountdownTimeView.CVCountdownTimeViewStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isTitleLeft: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var timeTitle: Swift.String
  @_Concurrency.MainActor @preconcurrency public var style: CVCountdownTimeView.CVCountdownTimeViewStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var timeValueColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var countDownCompletion: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public init(seconds: Swift.Int, timeTitle: Swift.String)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func uploadCountDownTime(seconds: Swift.Int)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency public func start()
  @_Concurrency.MainActor @preconcurrency public func stop()
  @objc deinit
}
open class Section<CellModel, HS> {
  open var cells: [CellModel]
  open var headerCls: Swift.AnyClass?
  open var headerHS: HS?
  open var footerCls: Swift.AnyClass?
  open var footerHS: HS?
  public init(cells: [CellModel] = [CellModel](), headerCls: Swift.AnyClass? = nil, headerHS: HS? = nil, footerCls: Swift.AnyClass? = nil, footerHS: HS? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers open class CVSection : Section<any CVTableViewCellModelProtocol, CoreFoundation.CGFloat>, CVTableViewHeaderFooterModelProtocol {
  open func headerFooterClass(_ tableView: UIKit.UITableView, section: ObjectiveC.NSInteger, type: CVAdapterViewType) -> Swift.AnyClass?
  open func headerFooterHeigh(_ tableView: UIKit.UITableView, section: ObjectiveC.NSInteger, type: CVAdapterViewType) -> CoreFoundation.CGFloat
  open func subDataKeyPath(_ indexPath: Foundation.IndexPath, inTableView tableView: UIKit.UITableView) -> Any
  override public init(cells: [any CVTableViewCellModelProtocol] = super, headerCls: Swift.AnyClass? = nil, headerHS: CoreFoundation.CGFloat? = nil, footerCls: Swift.AnyClass? = nil, footerHS: CoreFoundation.CGFloat? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers open class CVCollectionSection : Section<any CVCollectionViewCellModelProtocol, CoreFoundation.CGSize>, CVCollectionViewSupplementaryElementModelProtocol {
  open func reusableView(collectionView: UIKit.UICollectionView, supplementaryElementOfKind kind: Swift.String, atIndexPath indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  open func referenceFooterSize(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, atSection section: Swift.Int) -> CoreFoundation.CGSize
  open func referenceHeaderSize(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, atSection section: Swift.Int) -> CoreFoundation.CGSize
  open func subDataKeyPath(_ indexPath: Foundation.IndexPath, inCollectionView collectionView: UIKit.UICollectionView) -> Any
  override public init(cells: [any CVCollectionViewCellModelProtocol] = super, headerCls: Swift.AnyClass? = nil, headerHS: CoreFoundation.CGSize? = nil, footerCls: Swift.AnyClass? = nil, footerHS: CoreFoundation.CGSize? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVBanner : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var tipClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var iconPosition: CVBanner.CVBannerIconPosition {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconURL: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var headingText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isHiddenHeadingIcon: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleAttributedText: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var supportText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var badge: CVBadge {
    get
    set
  }
  public enum CVBannerIconPosition {
    case left
    case right
    case top
    public static func == (a: CVBanner.CVBannerIconPosition, b: CVBanner.CVBannerIconPosition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var detailLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVDoubleGoalScore2View : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var goalScoreView: CVDoubleGoalScoreView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var pointsProgress: CVPointsProgressView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var pointsHiden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class LoaddingButton : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var touchClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency public func hideLoadingState()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVAudioTrackCardType4 : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconURL: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var type: CVAudioTrackCardType1_TypeLabel.CVAudioTrackCardType1_TypeLabelType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var typeText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var duration: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public class var sharedApplication: UIKit.UIApplication? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public class var topMost: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public class func topMost(of viewController: UIKit.UIViewController?) -> UIKit.UIViewController?
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public static func dismissBottomSheet(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public static func dismissAlertController(completion: (() -> Swift.Void)? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVCheckBox : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public var cSize: CVCheckBox.CVCheckBoxSizeType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var type: CVCheckBox.CVCheckBoxType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  public enum CVCheckBoxSizeType : Swift.String, Swift.CaseIterable {
    case sm
    case md
    public init?(rawValue: Swift.String)
    public typealias AllCases = [CVCheckBox.CVCheckBoxSizeType]
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [CVCheckBox.CVCheckBoxSizeType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum CVCheckBoxType {
    case checkbox
    case radio
    case checkcircle
    case customImage(UIKit.UIImage, UIKit.UIImage)
    public static func getAllCases() -> [CVCheckBox.CVCheckBoxType]
  }
  @_Concurrency.MainActor @preconcurrency public init(size: CVCheckBox.CVCheckBoxSizeType = .sm, type: CVCheckBox.CVCheckBoxType = .checkbox)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVCollectionViewCell : UIKit.UICollectionViewCell, CVViewLifeCycleProtocol {
  @_Concurrency.MainActor @preconcurrency open var section: Swift.Int?
  @_Concurrency.MainActor @preconcurrency open var type: CVAdapterViewType?
  @_Concurrency.MainActor @preconcurrency open var kind: Swift.String?
  @_Concurrency.MainActor @preconcurrency open var indexPath: Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency open var protocolsVMO: [ViewMappingObject]?
  @_Concurrency.MainActor @preconcurrency open func cellForRowAt(indexPath: Foundation.IndexPath, targetView: UIKit.UIView, model: Any, eventTransmissionBlock: CVEventTransmissionBlock?)
  @_Concurrency.MainActor @preconcurrency open func cellWillReuse(with identifier: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func cellWillReuse(with identifier: Swift.String, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency open func cellWillAppear()
  @_Concurrency.MainActor @preconcurrency open func cellDidDisappear()
  @_Concurrency.MainActor @preconcurrency open var eventTransmissionBlock: CVEventTransmissionBlock?
  @_Concurrency.MainActor @preconcurrency weak open var targetView: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency open var model: Any?
  @_Concurrency.MainActor @preconcurrency open func addAutoDistributionModel(view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  @_Concurrency.MainActor @preconcurrency open func replaceAt(index: Swift.Int, autoDistributionModel view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  @_Concurrency.MainActor @preconcurrency open func removeAutoDistributionModelViewAt(index: Swift.Int)
  @_Concurrency.MainActor @preconcurrency open func removeAutoDistributionModelView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum CVMyGoalTagType {
  case edit
  case complete
  public static func == (a: CVMyGoalTagType, b: CVMyGoalTagType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVMyGoalTagView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var circularProgressIcon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var segments: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var outerColors: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var innerColors: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var outerLineWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var innerLineWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var segmentSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var progress: Swift.Double {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var info: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var patternType: CVMyGoalTagType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var editBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum PointsProgressPatternType {
  case progress
  case score
  public static func == (a: PointsProgressPatternType, b: PointsProgressPatternType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVPointsProgressView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var score_icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var descriptionValue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var score: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var type: PointsProgressPatternType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isClick: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var tipsTitle: Swift.String
  @_Concurrency.MainActor @preconcurrency public var tipsContent: Swift.String
  @_Concurrency.MainActor @preconcurrency public func configure(description: Swift.String, points: Swift.String, percentage: Swift.String, progressColor: UIKit.UIColor = .colorWithSemantic("ultitity color/utility-brand-200"))
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVInputView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var onValueChange: ((_ textView: CVInputView) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hintText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isError: Swift.Bool {
    get
    set
  }
  @objc deinit
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension CVInputView : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
}
public enum DoubleGoalScoreStyle {
  case defalut
  case dark
  case custom(iconContentBGColor: UIKit.UIColor, TitleColor: UIKit.UIColor, desColor: UIKit.UIColor)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVDoubleGoalScoreView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var leftView: CVGoalScoreView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var rightView: CVGoalScoreView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var style: DoubleGoalScoreStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVBasePopupViewController : CVBaseViewController {
  @_Concurrency.MainActor @preconcurrency public var onLayoutBlock: ((_ superView: UIKit.UIView, _ contentView: UIKit.UIView) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var contentView: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency public var isTapDismiss: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func show(target: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency public func dismiss(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency override public func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVMyGoalTag2View : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var editBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var goalView: CVMyGoalTagView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var progress: CVProgressBar {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var desTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var patternType: CVMyGoalTagType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var viewJourneyBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol CVTodaysTaskDelegate : AnyObject {
  func numberOfItemsInSection(section: Swift.Int) -> Swift.Int
  func cellForItemAt(indexPath: Foundation.IndexPath, itemView: CVDailyTaskView, cell: CVTodaysTaskItemCell)
}
@objc @_Concurrency.MainActor @preconcurrency public class CVTodaysTaskView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any CVTodaysTaskDelegate)?
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(height: CoreFoundation.CGFloat = 260)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency public func reloadData()
  @objc deinit
}
extension CVTodaysTaskView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVTodaysTaskItemCell : CVBaseCollectionViewCell {
  @_Concurrency.MainActor @preconcurrency public var desLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVSleepTrackDaily : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var enterClick: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var dailyClick: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var topHeaderText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var descriptionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var buttonText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var bottomHeaderText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var bottomButtonText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVSleepTrackDaily_ItemCol : CVBaseView {
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency public func setIcons(images: [UIKit.UIImage], values: [Swift.String], details: [Swift.String])
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVBaseCollectionViewCell : CVCollectionViewCell, CVViewInitProtocol {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func setupUI()
  @_Concurrency.MainActor @preconcurrency open func layoutUI()
  @objc deinit
}
public enum CVToastType {
  case error
  case warning
  case success
  case info
  public static func == (a: CVToastType, b: CVToastType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVToast : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public class func showMessage(message: Swift.String, duration: Foundation.TimeInterval = 3, type: CVToastType = .error)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum CVImageTitleLayoutType {
  case left(CoreFoundation.CGFloat)
  case right(CoreFoundation.CGFloat)
  case noImage
}
public enum CVImageTitleStyle {
  case dark
  case custom(bgColor: UIKit.UIColor, textColor: UIKit.UIColor)
}
@objc @_Concurrency.MainActor @preconcurrency public class CVImageTitleView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var iconImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconImageContentView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var style: CVImageTitleStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleType: UIKit.UILabel.CVTypography? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(padding: UIKit.UIEdgeInsets, layoutType: CVImageTitleLayoutType = .left(6), maxWidth: CoreFoundation.CGFloat = 300)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency public func uploadLayout(layoutType: CVImageTitleLayoutType)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FSPopoverViewTransitionContext {
  public enum Scene {
    case present
    case dismiss(_: Swift.Bool = false)
  }
  final public let scene: FSPopoverViewTransitionContext.Scene
  final public let popoverView: FSPopoverView
  final public let dimBackgroundView: UIKit.UIView
  final public func completeTransition()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVGoalScoreView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var iconImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var desInfo: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVAudioTrackCardType2 : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var onClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconURL: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var type: CVAudioTrackCardType1_TypeLabel.CVAudioTrackCardType1_TypeLabelType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var typeText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var duration: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SwitchTenantView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var clickTouchBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var leftUrl: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var leftIcon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var rightUrl: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var rightIcon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVTooltip : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var arrowDirection: CVTooltip.CVTipsArrowDirection {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var supportingText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var interval: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public func present(fromPoint: CoreFoundation.CGPoint)
  @_Concurrency.MainActor @preconcurrency public var shouldDismissOnTapOutside: Swift.Bool {
    get
    set
  }
  public enum CVTipsArrowDirection {
    case up
    case down
    case left
    case right
    case none
    public static func == (a: CVTooltip.CVTipsArrowDirection, b: CVTooltip.CVTipsArrowDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency convenience public init(_ titleString: Swift.String, _ detailString: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CVTooltip : FSPopoverViewDataSource {
  @_Concurrency.MainActor @preconcurrency public func backgroundView(for popoverView: FSPopoverView) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency public func contentView(for popoverView: FSPopoverView) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency public func contentSize(for popoverView: FSPopoverView) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency public func containerSafeAreaInsets(for popoverView: FSPopoverView) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency public func popoverViewShouldDismissOnTapOutside(_ popoverView: FSPopoverView) -> Swift.Bool
}
public struct CVCellSpacingModel {
  public init(height: CoreFoundation.CGFloat? = nil)
}
extension CVCellSpacingModel : CVTableViewCellModelProtocol {
  public func cellClass(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  public func cellHeigh(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVAudioTrackCardType3 : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconURL: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var type: CVAudioTrackCardType1_TypeLabel.CVAudioTrackCardType1_TypeLabelType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var typeText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var duration: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVToggle : UIKit.UIControl {
  @_Concurrency.MainActor @preconcurrency public var cSize: CVToggle.CVToggleSizeType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var status: CVToggle.CVToggleStateType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var onTintColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var offTintColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var thumbTintColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setOn(on: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public var isOn: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var animationDuration: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var padding: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isLabelsShown: Swift.Bool {
    get
    set
  }
  public enum CVToggleSizeType : Swift.CaseIterable {
    case sm
    case md
    public static func == (a: CVToggle.CVToggleSizeType, b: CVToggle.CVToggleSizeType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVToggle.CVToggleSizeType]
    nonisolated public static var allCases: [CVToggle.CVToggleSizeType] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CVToggleStateType : Swift.CaseIterable {
    case normal
    case disabled
    public static func == (a: CVToggle.CVToggleStateType, b: CVToggle.CVToggleStateType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVToggle.CVToggleStateType]
    nonisolated public static var allCases: [CVToggle.CVToggleStateType] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension CVToggle {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
}
extension CVToggle {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
}
open class FSPopoverListItem {
  public enum ReloadType {
    case rerender
    case reload
    public static func == (a: FSPopoverListItem.ReloadType, b: FSPopoverListItem.ReloadType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum SelectionStyle {
    case none
    case gray
    public static func == (a: FSPopoverListItem.SelectionStyle, b: FSPopoverListItem.SelectionStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  open var size: CoreFoundation.CGSize
  open var cellType: FSPopoverListCell.Type {
    get
  }
  final public let scrollDirection: FSPopoverListView.ScrollDirection
  final public var selectionStyle: FSPopoverListItem.SelectionStyle
  final public var selectedHandler: ((_ item: FSPopoverListItem) -> Swift.Void)?
  final public var isEnabled: Swift.Bool
  final public var separatorInset: UIKit.UIEdgeInsets
  final public var separatorColor: UIKit.UIColor?
  final public var isSeparatorHidden: Swift.Bool
  final public var highlightedColor: UIKit.UIColor?
  public init(scrollDirection: FSPopoverListView.ScrollDirection = .vertical)
  final public func reload(_ type: FSPopoverListItem.ReloadType = .rerender)
  @objc deinit
}
public class CVExpandableSection : CVSection {
  open var isExpand: Swift.Bool {
    get
    set
  }
  open var expandCells: [any CVTableViewCellModelProtocol]
  override public var cells: [any CVTableViewCellModelProtocol] {
    get
    set
  }
  public init(isExpand: Swift.Bool, expandCells: [any CVTableViewCellModelProtocol])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CVCollectionViewAdapterData : ObjectiveC.NSObject, CVAdapterDataProtocol {
  open var cellDatas: [Any]?
  open var headerDatas: [Any]?
  open var footerDatas: [Any]?
  open var customData: Any?
  @objc override dynamic public init()
  @objc deinit
}
@objc open class CVCellTitleModel : ObjectiveC.NSObject {
  public var inset: UIKit.UIEdgeInsets
  public var typography: UIKit.UILabel.CVTypography?
  public var textColor: UIKit.UIColor?
  public var text: Swift.String?
  public var key: Swift.String?
  public var backgroundColor: UIKit.UIColor?
  public init(inset: UIKit.UIEdgeInsets = UIEdgeInsets(top: 6, left: 16, bottom: 6, right: 16), typography: UIKit.UILabel.CVTypography? = nil, textColor: UIKit.UIColor? = nil, text: Swift.String? = nil, key: Swift.String? = nil)
  open func geteMultilingualTitle(_ key: Swift.String) -> Swift.String
  @objc deinit
}
extension CVCellTitleModel : CVTableViewCellModelProtocol {
  public func cellClass(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  public func cellHeigh(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
public protocol FSPopoverViewDataSource : AnyObject {
  func backgroundView(for popoverView: FSPopoverView) -> UIKit.UIView?
  func contentView(for popoverView: FSPopoverView) -> UIKit.UIView?
  func contentSize(for popoverView: FSPopoverView) -> CoreFoundation.CGSize
  func containerSafeAreaInsets(for popoverView: FSPopoverView) -> UIKit.UIEdgeInsets
  func popoverViewShouldDismissOnTapOutside(_ popoverView: FSPopoverView) -> Swift.Bool
}
extension FSPopoverViewDataSource {
  public func backgroundView(for popoverView: FSPopoverView) -> UIKit.UIView?
  public func contentView(for popoverView: FSPopoverView) -> UIKit.UIView?
  public func contentSize(for popoverView: FSPopoverView) -> CoreFoundation.CGSize
  public func containerSafeAreaInsets(for popoverView: FSPopoverView) -> UIKit.UIEdgeInsets
  public func popoverViewShouldDismissOnTapOutside(_ popoverView: FSPopoverView) -> Swift.Bool
}
public enum CVDailyTaskStatus {
  case normal
  case completed
  public static func == (a: CVDailyTaskStatus, b: CVDailyTaskStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CVDailyTaskStyle {
  case none
  case oneCol
  case click
  case twoCol
  case oneColClick
  case progress
  public static func == (a: CVDailyTaskStyle, b: CVDailyTaskStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CVDailyTaskType2Style {
  case `default`
  case dark
  public static func == (a: CVDailyTaskType2Style, b: CVDailyTaskType2Style) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVDailyTaskType2 : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconURL: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var detail: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var buttonText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var completedButtonText: Swift.String
  @_Concurrency.MainActor @preconcurrency public var completedButtonIcon: UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency public var isCompleted: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var style: CVDailyTaskStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var inputField: CVInputField {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var progress: CVProgressBar {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var uiStyle: CVDailyTaskType2Style {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var detailNumber: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var inputTextChange: ((Swift.String) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var isHiddenButton: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isEnableButton: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var oneColTouchBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var buttonClickBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var valueText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var unitsText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVBadge : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public var cSize: CVBadge.CVBadgeSizeType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hierarchy: CVBadge.CVBadgeHierarchyType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var solid: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var border: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconURL: Swift.String? {
    get
    set
  }
  public enum CVBadgeSizeType : Swift.CaseIterable {
    case sm
    case md
    case lg
    public static func == (a: CVBadge.CVBadgeSizeType, b: CVBadge.CVBadgeSizeType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVBadge.CVBadgeSizeType]
    nonisolated public static var allCases: [CVBadge.CVBadgeSizeType] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CVBadgeHierarchyType : Swift.CaseIterable {
    case brand
    case error
    case warning
    case success
    case info
    case gray
    case white
    public static func == (a: CVBadge.CVBadgeHierarchyType, b: CVBadge.CVBadgeHierarchyType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVBadge.CVBadgeHierarchyType]
    nonisolated public static var allCases: [CVBadge.CVBadgeHierarchyType] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public init(size: CVBadge.CVBadgeSizeType = .sm, hierarchy: CVBadge.CVBadgeHierarchyType = .brand)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVInputFieldGroup : CVGroup<CVPaddingLabel, CVInputField, UIKit.UIView> {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @objc deinit
}
public struct CVDesignWrapper<Base> {
  public let base: Base
}
public protocol CVDesignCompatible : AnyObject {
}
public protocol CVDesignCompatibleValue {
}
extension CVDesignCompatible {
  public var cv: CVDesignWrapper<Self> {
    get
    set
  }
}
extension CVDesignCompatibleValue {
  public var cv: CVDesignWrapper<Self> {
    get
    set
  }
}
public protocol CVDesignTypographyExtensions : UIKit.UILabel {
  var lineHeight: CoreFoundation.CGFloat? { get set }
  var letterSpacing: CoreFoundation.CGFloat? { get set }
  var underline: UIKit.NSUnderlineStyle? { get set }
  var strikethrough: UIKit.NSUnderlineStyle? { get set }
  var showGrid: Swift.Bool { get set }
  var leadingImage: CVDesignTypography.Image? { get set }
  var trailingImage: CVDesignTypography.Image? { get set }
}
@_hasMissingDesignatedInitializers public class CVDesignTypography {
  public struct Image : Swift.Equatable {
    public enum Align {
      case baseline(_: CoreFoundation.CGFloat? = nil, _: CoreFoundation.CGSize? = nil)
      case centered(_: CoreFoundation.CGFloat? = nil, _: CoreFoundation.CGSize? = nil)
      case fitToLineHeight
      case fitToCapHeight
    }
    public static func == (lhs: CVDesignTypography.Image, rhs: CVDesignTypography.Image) -> Swift.Bool
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVSelectField : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var tagText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var descriptionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var type: CVSelectField.CVSelectFieldCheckBoxStyle {
    get
    set
  }
  public enum CVSelectFieldCheckBoxStyle {
    case singleChoice
    case multipleChoice
    case none
    public static func == (a: CVSelectField.CVSelectFieldCheckBoxStyle, b: CVSelectField.CVSelectFieldCheckBoxStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVPaddingLabel : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency open var textEdgeInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect, limitedToNumberOfLines numberOfLines: Swift.Int) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVSleepTrackNew : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var enterClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var descriptionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var buttonText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency open class CVBaseTableViewHeaderFooterView : CVTableViewHeaderFooterView, CVViewInitProtocol {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func setupUI()
  @_Concurrency.MainActor @preconcurrency open func layoutUI()
  @objc deinit
}
public enum QuestionHeaderType {
  case score(color: UIKit.UIColor?)
  case tag(bgColor: UIKit.UIColor?, textColor: UIKit.UIColor?)
  case title
}
@objc @_Concurrency.MainActor @preconcurrency public class QuestionHeader : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var titleType: UIKit.UILabel.CVTypography? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subTitleType: UIKit.UILabel.CVTypography? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subTitleColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleTextAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subTitleTextAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var viewsSpacing: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var score: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(type: QuestionHeaderType)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CVTableViewAdapterData : ObjectiveC.NSObject, CVTableViewAdapterDataProtocol {
  open var cellDatas: [Any]?
  open var headerDatas: [Any]?
  open var footerDatas: [Any]?
  open var customData: Any?
  open var indexDatas: [Swift.String]?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVBottomSheetType2 : CVBaseView {
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVBottomSheetType2Item : CVBaseView {
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency public func setTitle(title: Swift.String, image: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol CVPullRefreshable {
  func addPullDownRefresh(to scrollView: UIKit.UIScrollView, action: @escaping () -> Swift.Void, customHeader: MJRefresh.MJRefreshHeader?)
  func addPullUpLoadMore(to scrollView: UIKit.UIScrollView, action: @escaping () -> Swift.Void, customFooter: MJRefresh.MJRefreshFooter?)
  func endRefreshing(for scrollView: UIKit.UIScrollView)
  func endLoadingMore(for scrollView: UIKit.UIScrollView, isNoMoreData: Swift.Bool)
  func resetNoMoreData(for scrollView: UIKit.UIScrollView)
}
extension CVPullRefreshable {
  public func addPullDownRefresh(to scrollView: UIKit.UIScrollView, action: @escaping () -> Swift.Void, customHeader: MJRefresh.MJRefreshHeader? = nil)
  public func addPullUpLoadMore(to scrollView: UIKit.UIScrollView, action: @escaping () -> Swift.Void, customFooter: MJRefresh.MJRefreshFooter? = nil)
  public func endRefreshing(for scrollView: UIKit.UIScrollView)
  public func endLoadingMore(for scrollView: UIKit.UIScrollView, isNoMoreData: Swift.Bool)
  public func resetNoMoreData(for scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVCollectionReusableView : UIKit.UICollectionReusableView, CVCollectionReusableViewLifeCycleProtocol {
  @_Concurrency.MainActor @preconcurrency open var section: Swift.Int?
  @_Concurrency.MainActor @preconcurrency open var type: CVAdapterViewType?
  @_Concurrency.MainActor @preconcurrency open var protocolsVMO: [ViewMappingObject]?
  @_Concurrency.MainActor @preconcurrency open var indexPath: Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency open var eventTransmissionBlock: CVEventTransmissionBlock?
  @_Concurrency.MainActor @preconcurrency open var kind: Swift.String?
  @_Concurrency.MainActor @preconcurrency weak open var targetView: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency open var model: Any?
  @_Concurrency.MainActor @preconcurrency open func reusableView(for collectionView: UIKit.UICollectionView, indexPath: Foundation.IndexPath, kind: Swift.String, model: Any, eventTransmissionBlock: CVEventTransmissionBlock?)
  @_Concurrency.MainActor @preconcurrency open func reusableViewWillReuse(with identifier: Swift.String, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency open func reusableViewWillAppear()
  @_Concurrency.MainActor @preconcurrency open func reusableViewDidDisappear()
  @_Concurrency.MainActor @preconcurrency open func addAutoDistributionModel(view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  @_Concurrency.MainActor @preconcurrency open func replaceAt(index: Swift.Int, autoDistributionModel view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  @_Concurrency.MainActor @preconcurrency open func removeAutoDistributionModelViewAt(index: Swift.Int)
  @_Concurrency.MainActor @preconcurrency open func removeAutoDistributionModelView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVBaseScrollViewController : CVBaseViewController {
  @_Concurrency.MainActor @preconcurrency public var scrollView: UIKit.UIScrollView {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var contentView: UIKit.UIStackView {
    get
  }
  @_Concurrency.MainActor @preconcurrency override open func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class CVCountdownTimer {
  public init(seconds: Swift.Int, interval: Swift.Int = 1, updateHandler: @escaping (Swift.String) -> Swift.Void, completion: @escaping () -> Swift.Void)
  public func uploadCountDownTime(seconds: Swift.Int)
  public func start()
  public func stop()
  public var isRunning: Swift.Bool {
    get
  }
  @objc deinit
}
extension UIKit.UITableView {
  @_Concurrency.MainActor @preconcurrency public var tableViewAdapter: CVTableViewAdapter? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public var scrollViewDelegates: [any CVScrollViewDelegate]? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public func add(scrollViewDelegate: any CVScrollViewDelegate)
  @_Concurrency.MainActor @preconcurrency public func remove(scrollViewDelegate: any CVScrollViewDelegate)
  @_Concurrency.MainActor @preconcurrency public var eventTransmissionBlock: CVEventTransmissionBlock? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public func setEventTransmissionBlock(eventTransmissionBlock: @escaping CVEventTransmissionBlock)
  @_Concurrency.MainActor @preconcurrency public var tableViewDidSelectRowBlock: CVTableViewDidSelectRowBlock? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public var tableViewCommitEditForRowBlock: CVTableViewCommitEditForRowBlock? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public var tableViewWillBeginEditingBlock: CVTableViewWillBeginEditingBlock? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public var tableViewDidEndEditingBlock: CVTableViewDidEndEditingBlock? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public func setTableViewDidSelectRowBlock(tableViewDidSelectRowBlock: @escaping CVTableViewDidSelectRowBlock)
  @_Concurrency.MainActor @preconcurrency public func hiddHeadView()
  @_Concurrency.MainActor @preconcurrency public func hiddenFooterView()
  @_Concurrency.MainActor @preconcurrency public func autoHeight()
}
extension UIKit.UITableView {
  @_Concurrency.MainActor @preconcurrency public var adapterData: CVTableViewAdapterData {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var cvCellDatas: [Any]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var cvFooterDatas: [Any]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var cvHeaderDatas: [Any]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var indexDatas: [Swift.String]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var customData: Any? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVPagination : UIKit.UIControl {
  @_Concurrency.MainActor @preconcurrency public var onIndicatorClick: ((_ index: Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var numberOfPages: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var currentPage: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var cSize: CVPagination.CVPaginationSize {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var style: CVPagination.CVPaginationStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var color: CVPagination.CVPaginationColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var framed: Swift.Bool {
    get
    set
  }
  public enum CVPaginationSize : Swift.CaseIterable {
    case md
    case lg
    public static func == (a: CVPagination.CVPaginationSize, b: CVPagination.CVPaginationSize) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVPagination.CVPaginationSize]
    nonisolated public static var allCases: [CVPagination.CVPaginationSize] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CVPaginationStyle : Swift.CaseIterable {
    case dot
    case line
    public static func == (a: CVPagination.CVPaginationStyle, b: CVPagination.CVPaginationStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVPagination.CVPaginationStyle]
    nonisolated public static var allCases: [CVPagination.CVPaginationStyle] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CVPaginationColor : Swift.CaseIterable {
    case primaryLightBg
    case primaryDarkBg
    case grayLightBg
    case grayDarkBg
    case primaryLightBg2
    public static func == (a: CVPagination.CVPaginationColor, b: CVPagination.CVPaginationColor) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVPagination.CVPaginationColor]
    nonisolated public static var allCases: [CVPagination.CVPaginationColor] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension UIKit.UITableView {
  @_Concurrency.MainActor @preconcurrency public func data(sections: [any CVTableViewHeaderFooterModelProtocol])
}
public protocol CVScrollViewDelegate {
  func cv_scrollViewDidScroll(scrollView: UIKit.UIScrollView)
  func cv_scrollViewDidZoom(scrollView: UIKit.UIScrollView)
  func cv_scrollViewWillBeginDragging(scrollView: UIKit.UIScrollView)
  func cv_scrollViewWillEndDragging(scrollView: UIKit.UIScrollView, with velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  func cv_scrollViewDidEndDragging(scrollView: UIKit.UIScrollView, will decelerate: Swift.Bool)
  func cv_scrollViewWillBeginDecelerating(scrollView: UIKit.UIScrollView)
  func cv_scrollViewDidEndDecelerating(scrollView: UIKit.UIScrollView)
  func cv_scrollViewDidEndScrollingAnimation(scrollView: UIKit.UIScrollView)
  func cv_viewForZoomingInScrollView(scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  func cv_scrollViewWillBeginZooming(scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  func cv_scrollViewDidEndZooming(scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, at scale: CoreFoundation.CGFloat)
  func cv_scrollViewShouldScrollToTop(scrollView: UIKit.UIScrollView) -> Swift.Bool
  func cv_scrollViewDidScrollToTop(scrollView: UIKit.UIScrollView)
  func cv_scrollViewDidChangeAdjustedContentInset(scrollView: UIKit.UIScrollView)
}
extension CVScrollViewDelegate {
  public func cv_scrollViewDidScroll(scrollView: UIKit.UIScrollView)
  public func cv_scrollViewDidZoom(scrollView: UIKit.UIScrollView)
  public func cv_scrollViewWillBeginDragging(scrollView: UIKit.UIScrollView)
  public func cv_scrollViewWillEndDragging(scrollView: UIKit.UIScrollView, with velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  public func cv_scrollViewDidEndDragging(scrollView: UIKit.UIScrollView, will decelerate: Swift.Bool)
  public func cv_scrollViewWillBeginDecelerating(scrollView: UIKit.UIScrollView)
  public func cv_scrollViewDidEndDecelerating(scrollView: UIKit.UIScrollView)
  public func cv_scrollViewDidEndScrollingAnimation(scrollView: UIKit.UIScrollView)
  public func cv_viewForZoomingInScrollView(scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  public func cv_scrollViewWillBeginZooming(scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  public func cv_scrollViewDidEndZooming(scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, at scale: CoreFoundation.CGFloat)
  public func cv_scrollViewShouldScrollToTop(scrollView: UIKit.UIScrollView) -> Swift.Bool
  public func cv_scrollViewDidScrollToTop(scrollView: UIKit.UIScrollView)
  public func cv_scrollViewDidChangeAdjustedContentInset(scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVQuestionnaireHeaderView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var subTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @objc deinit
}
final public class FSPopoverViewTransitionScale : FSPopoverViewAnimatedTransitioning {
  final public var usingSpring: Swift.Bool
  public init()
  final public func animateTransition(transitionContext context: FSPopoverViewTransitionContext)
  @objc deinit
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor @preconcurrency public var collectionViewAdapter: CVCollectionViewAdapter? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public var scrollViewDelegates: [any CVScrollViewDelegate]? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public func add(scrollViewDelegate: any CVScrollViewDelegate)
  @_Concurrency.MainActor @preconcurrency public func remove(scrollViewDelegate: any CVScrollViewDelegate)
  @_Concurrency.MainActor @preconcurrency public var eventTransmissionBlock: CVEventTransmissionBlock? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public func setEventTransmissionBlock(eventTransmissionBlock: @escaping CVEventTransmissionBlock)
  @_Concurrency.MainActor @preconcurrency public var collectionViewDidSelectItemAtIndexPathBlock: CVCollectionViewDidSelectItemAtIndexPathBlock? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor @preconcurrency public func setCollectionViewDidSelectItemAtIndexPathBlock(collectionViewDidSelectItemAtIndexPathBlock: @escaping CVCollectionViewDidSelectItemAtIndexPathBlock)
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor @preconcurrency public var adapterData: CVCollectionViewAdapterData {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var cellDatas: [Any]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var footerDatas: [Any]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var headerDatas: [Any]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var customData: Any? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVFloatLayoutView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var padding: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var minimumItemSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var maximumItemSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var itemMargins: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVTableViewCell : UIKit.UITableViewCell, CVViewLifeCycleProtocol {
  @_Concurrency.MainActor @preconcurrency open var section: Swift.Int?
  @_Concurrency.MainActor @preconcurrency open var type: CVAdapterViewType?
  @_Concurrency.MainActor @preconcurrency open var kind: Swift.String?
  @_Concurrency.MainActor @preconcurrency open var protocolsVMO: [ViewMappingObject]?
  @_Concurrency.MainActor @preconcurrency open var indexPath: Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency open var eventTransmissionBlock: CVEventTransmissionBlock?
  @_Concurrency.MainActor @preconcurrency weak open var targetView: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency open var model: Any?
  @_Concurrency.MainActor @preconcurrency open func cellForRowAt(indexPath: Foundation.IndexPath, targetView: UIKit.UIView, model: Any, eventTransmissionBlock: CVEventTransmissionBlock?)
  @_Concurrency.MainActor @preconcurrency open func cellWillReuse(with identifier: Swift.String)
  @_Concurrency.MainActor @preconcurrency open func cellWillReuse(with identifier: Swift.String, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency open func cellWillAppear()
  @_Concurrency.MainActor @preconcurrency open func cellDidDisappear()
  @_Concurrency.MainActor @preconcurrency open func addAutoDistributionModel(view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  @_Concurrency.MainActor @preconcurrency open func replaceAt(index: Swift.Int, autoDistributionModel view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  @_Concurrency.MainActor @preconcurrency open func removeAutoDistributionModelViewAt(index: Swift.Int)
  @_Concurrency.MainActor @preconcurrency open func removeAutoDistributionModelView()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias CVCollectionViewDidSelectItemAtIndexPathBlock = (_ collectionView: UIKit.UICollectionView, _ indexPath: Foundation.IndexPath, _ itemData: Any) -> Swift.Void
public protocol CVCollectionViewAdapterProtocol : CVSubDataOfKeyPathDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  func obtainCellClassWithCell(_ data: Any, collectionView: UIKit.UICollectionView, cellForItemAtIndexPath indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  func obtainSupplementaryElementClassWithCell(_ data: Any, collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Foundation.NSString, indexPath: Foundation.IndexPath) -> Swift.AnyClass?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVCollectionViewAdapter : ObjectiveC.NSObject, CVCollectionViewAdapterProtocol {
  @_Concurrency.MainActor @preconcurrency open var cellName: Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency open var headerName: Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency open var footerName: Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency open var adapterData: CVCollectionViewAdapterData
  @_Concurrency.MainActor @preconcurrency open var keyPathOfSubData: Any?
  @_Concurrency.MainActor @preconcurrency weak open var controller: UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency open var tag: ObjectiveC.NSInteger?
  @_Concurrency.MainActor @preconcurrency open func obtainCellClassWithCell(_ data: Any, collectionView: UIKit.UICollectionView, cellForItemAtIndexPath indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency open func obtainSupplementaryElementClassWithCell(_ data: Any, collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Foundation.NSString, indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency open func subDataKeyPath(_ indexPath: Foundation.IndexPath, targetView: UIKit.UIScrollView) -> Any?
  @_Concurrency.MainActor @preconcurrency @objc open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency open func cellDataWithIndexPath(_ indexPath: Foundation.IndexPath, collectionView: UIKit.UICollectionView) -> Any?
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency open func defaultReusableView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath, headerFooterData: Any?) -> CVCollectionReusableView
  @_Concurrency.MainActor @preconcurrency open func headerFooterDataWithrSupplementaryElementOfKind(kind: Foundation.NSString, indexPath: Foundation.IndexPath) -> Any?
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, willDisplaySupplementaryView view: UIKit.UICollectionReusableView, forElementKind elementKind: Swift.String, at indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplayingSupplementaryView view: UIKit.UICollectionReusableView, forElementOfKind elementKind: Swift.String, at indexPath: Foundation.IndexPath)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @available(iOS 3.2, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @available(iOS 5.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewWillBeginDecelerating(_ scrollView: UIKit.UIScrollView)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @available(iOS 3.2, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidScrollToTop(_ scrollView: UIKit.UIScrollView)
  @available(iOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVDatePicker : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var didSelectedDate: ((_ date: Foundation.Date) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var datas: [Swift.String]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func selectedDate(date: Foundation.Date)
  @_Concurrency.MainActor @preconcurrency public var weeklyView: JTAppleCalendar.JTACMonthView {
    get
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CVDatePicker : JTAppleCalendar.JTACMonthViewDelegate, JTAppleCalendar.JTACMonthViewDataSource {
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, willDisplay cell: JTAppleCalendar.JTACDayCell, forItemAt date: Foundation.Date, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, cellForItemAt date: Foundation.Date, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath) -> JTAppleCalendar.JTACDayCell
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, shouldSelectDate date: Foundation.Date, cell: JTAppleCalendar.JTACDayCell?, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, didSelectDate date: Foundation.Date, cell: JTAppleCalendar.JTACDayCell?, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, didDeselectDate date: Foundation.Date, cell: JTAppleCalendar.JTACDayCell?, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency public func scrollDidEndDecelerating(for calendar: JTAppleCalendar.JTACMonthView)
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, didScrollToDateSegmentWith visibleDates: JTAppleCalendar.DateSegmentInfo)
  @_Concurrency.MainActor @preconcurrency public func configureCalendar(_ calendar: JTAppleCalendar.JTACMonthView) -> JTAppleCalendar.ConfigurationParameters
}
public protocol CVTableViewCellModelProtocol {
  func cellClass(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  func cellHeigh(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  func cellCanEdit(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> Swift.Bool
  func titleForDeleteConfirmationButton(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> Swift.String?
  func editingStyle(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  func editActions(tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> [UIKit.UITableViewRowAction]?
  func shouldIndentWhileEditing(tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> Swift.Bool
}
extension CVTableViewCellModelProtocol {
  public func cellCanEdit(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> Swift.Bool
  public func titleForDeleteConfirmationButton(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> Swift.String?
  public func editingStyle(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  public func editActions(tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> [UIKit.UITableViewRowAction]?
  public func shouldIndentWhileEditing(tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> Swift.Bool
}
public protocol CVTableViewHeaderFooterModelProtocol {
  func headerFooterClass(_ tableView: UIKit.UITableView, section: ObjectiveC.NSInteger, type: CVAdapterViewType) -> Swift.AnyClass?
  func headerFooterHeigh(_ tableView: UIKit.UITableView, section: ObjectiveC.NSInteger, type: CVAdapterViewType) -> CoreFoundation.CGFloat
  func subDataKeyPath(_ indexPath: Foundation.IndexPath, inTableView tableView: UIKit.UITableView) -> Any
}
extension CVTableViewHeaderFooterModelProtocol {
  public func subDataKeyPath(_ indexPath: Foundation.IndexPath, inTableView tableView: UIKit.UITableView) -> Any
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVSimpleTableViewAdapter : CVTableViewAdapter {
  @_Concurrency.MainActor @preconcurrency override open func obtainCellClassWithCell(_ data: Any, tableView: UIKit.UITableView, cellForRowAtIndexPath indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency override open func obtainHeaderClassWithHeader(_ data: Any, tableView: UIKit.UITableView, viewForHeaderInSection section: ObjectiveC.NSInteger) -> Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency override open func subDataKeyPath(_ indexPath: Foundation.IndexPath, targetView: UIKit.UIScrollView) -> Any?
  @_Concurrency.MainActor @preconcurrency override open func obtainFooterClassWithFooter(_ data: Any, tableView: UIKit.UITableView, viewForFooterInSection section: ObjectiveC.NSInteger) -> Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, titleForDeleteConfirmationButtonForRowAt indexPath: Foundation.IndexPath) -> Swift.String?
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, editActionsForRowAt indexPath: Foundation.IndexPath) -> [UIKit.UITableViewRowAction]?
  @_Concurrency.MainActor @preconcurrency @objc override open func tableView(_ tableView: UIKit.UITableView, shouldIndentWhileEditingRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVBaseTableViewController : CVBaseViewController {
  @_Concurrency.MainActor @preconcurrency open var style: UIKit.UITableView.Style {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var tableView: UIKit.UITableView {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency override open func setupViews()
  @_Concurrency.MainActor @preconcurrency open func tableViewDidSelect(tableView: UIKit.UITableView, indexPath: Foundation.IndexPath, itemData: Any?)
  @_Concurrency.MainActor @preconcurrency open func handleEventTransmission(target: Any?, params: Any?, tag: Swift.Int, callBack: CVCallBack?) -> Any?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class FSPopoverView : UIKit.UIView {
  public enum FSArrowDirection : Swift.Equatable, Swift.Hashable {
    case up, down, left, right
    public static func == (a: FSArrowDirection, b: FSArrowDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency weak open var dataSource: (any FSPopoverViewDataSource)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency weak open var transitioningDelegate: (any FSPopoverViewAnimatedTransitioning)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var arrowDirection: FSArrowDirection {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var autosetsArrowDirection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var arrowPoint: CoreFoundation.CGPoint {
    get
  }
  @_Concurrency.MainActor @preconcurrency final weak public var containerView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var showsArrow: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var showsDimBackground: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var arrowSize: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var borderWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var borderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var shadowColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var shadowRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var shadowOpacity: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var shadowOffset: CoreFoundation.CGSize {
    get
    set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc final override public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open class func appearance() -> Self
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open class func appearance(for trait: UIKit.UITraitCollection) -> Self
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open class func appearance(whenContainedInInstancesOf containerTypes: [any UIKit.UIAppearanceContainer.Type]) -> Self
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open class func appearance(for trait: UIKit.UITraitCollection, whenContainedInInstancesOf containerTypes: [any UIKit.UIAppearanceContainer.Type]) -> Self
  @_Concurrency.MainActor @preconcurrency open func setNeedsReload()
  @_Concurrency.MainActor @preconcurrency open func reloadDataIfNeeded()
  @_Concurrency.MainActor @preconcurrency open func reloadData()
  @_Concurrency.MainActor @preconcurrency open func transitionContext(for scene: FSPopoverViewTransitionContext.Scene) -> FSPopoverViewTransitionContext
  @_Concurrency.MainActor @preconcurrency open func present(fromView view: UIKit.UIView, displayIn specifiedView: UIKit.UIView? = nil, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency open func present(fromPoint point: CoreFoundation.CGPoint, in view: UIKit.UIView? = nil, displayIn specifiedView: UIKit.UIView? = nil, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency open func present(fromRect rect: CoreFoundation.CGRect, in view: UIKit.UIView? = nil, displayIn specifiedView: UIKit.UIView? = nil, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency open func present(fromBarItem barItem: UIKit.UIBarItem, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency open func dismiss(animated: Swift.Bool = true, isSelection: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
extension FSPopoverView {
  @_Concurrency.MainActor @preconcurrency public func moveToFront()
  @_Concurrency.MainActor @preconcurrency public func maximumContentSizeOf(direction: FSArrowDirection) -> CoreFoundation.CGSize?
}
@objc @_Concurrency.MainActor @preconcurrency open class FSPopoverListCell : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency open var isHighlighted: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public let item: FSPopoverListItem
  @_Concurrency.MainActor @preconcurrency required public init(item: FSPopoverListItem)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency open func didInitialize()
  @_Concurrency.MainActor @preconcurrency open func renderContents()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVDateV2 : CVBaseView {
  public enum CVDateV2Style : Swift.CaseIterable {
    case `default`
    case dark
    public static func == (a: CVDateV2.CVDateV2Style, b: CVDateV2.CVDateV2Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVDateV2.CVDateV2Style]
    nonisolated public static var allCases: [CVDateV2.CVDateV2Style] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CVDateV2Type : Swift.CaseIterable {
    case `default`
    case logged
    case today
    case uncompleted
    case ongoing
    case luck
    public static func == (a: CVDateV2.CVDateV2Type, b: CVDateV2.CVDateV2Type) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVDateV2.CVDateV2Type]
    nonisolated public static var allCases: [CVDateV2.CVDateV2Type] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var style: CVDateV2.CVDateV2Style
  @_Concurrency.MainActor @preconcurrency public var type: CVDateV2.CVDateV2Type {
    get
    set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var checkCallback: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var IsTapInteractionEnabled: Swift.Bool
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency public func selectItem()
  @_Concurrency.MainActor @preconcurrency public func uncheck()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.Double {
  public func formatted(fractionDigits: Swift.Int = 1) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVDailyTaskType1 : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var descriptionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var buttonText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var type: CVDailyTaskStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var inputField: CVInputField {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var progress: CVProgressBar {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var expand: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var completed: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency public var showGrid: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVBaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency open func preferredStatusBar() -> UIKit.UIStatusBarStyle
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency open func setupViews()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension CVBaseViewController {
  @_Concurrency.MainActor @preconcurrency public func setLeftBarButtonItem(_ image: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency public func setLeftBarButtonView(_ image: UIKit.UIImage?, bgColor: UIKit.UIColor = .colorWithSemantic("background color/bg-brand-solid"))
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func leftAction()
  @_Concurrency.MainActor @preconcurrency public func setRightBarButtonItem(_ image: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency public func setRightBarButtonView(_ image: UIKit.UIImage?, bgColor: UIKit.UIColor = .colorWithSemantic("background color/bg-brand-primary"))
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func rightAction()
  @_Concurrency.MainActor @preconcurrency public func setNavBackGroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setNavTitle(font: UIKit.UIFont, color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setNavTitleAttributed(attribute: [Foundation.NSAttributedString.Key : Any])
  @_Concurrency.MainActor @preconcurrency public func setNavTransparent()
  @_Concurrency.MainActor @preconcurrency public func setNavNotTransparent()
}
extension UIKit.UIImage {
  public func wrapperWithBackgroundColor(_ backgroundColor: UIKit.UIColor = .white, size: CoreFoundation.CGSize = CGSize(width: 48, height: 48), radius: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVBottomSheetViewController : CVBaseViewController {
  @_Concurrency.MainActor @preconcurrency public var onLayoutBlock: ((_ superView: UIKit.UIView, _ contentView: UIKit.UIView) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var contentView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func showBottomSheet(target: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency public func dismissBottomSheet(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var isAutomaticClosing: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency override public func setupViews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias CVCallBack = (_ data: Any?) -> Any?
public typealias CVEventTransmissionBlock = (_ target: Any?, _ params: Any?, _ tag: ObjectiveC.NSInteger, _ callBack: CVCallBack?) -> Any?
public typealias CVTableViewDidSelectRowBlock = (_ tableView: UIKit.UITableView, _ indexPath: Foundation.IndexPath, _ itemData: Any) -> Swift.Void
public typealias CVTableViewCommitEditForRowBlock = (_ tableView: UIKit.UITableView, _ editingStyle: UIKit.UITableViewCell.EditingStyle, _ indexPath: Foundation.IndexPath, _ itemData: Any) -> Swift.Void
public typealias CVTableViewDidEndEditingBlock = (_ tableView: UIKit.UITableView, _ indexPath: Foundation.IndexPath?, _ itemData: Any) -> Swift.Void
public typealias CVTableViewWillBeginEditingBlock = (_ tableView: UIKit.UITableView, _ indexPath: Foundation.IndexPath?, _ itemData: Any) -> Swift.Void
public protocol CVTableViewAdapterProtocol : CVSubDataOfKeyPathDelegate, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  func obtainCellClassWithCell(_ data: Any, tableView: UIKit.UITableView, cellForRowAtIndexPath indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  func obtainHeaderClassWithHeader(_ data: Any, tableView: UIKit.UITableView, viewForHeaderInSection section: ObjectiveC.NSInteger) -> Swift.AnyClass?
  func obtainFooterClassWithFooter(_ data: Any, tableView: UIKit.UITableView, viewForFooterInSection section: ObjectiveC.NSInteger) -> Swift.AnyClass?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVTableViewAdapter : ObjectiveC.NSObject, CVTableViewAdapterProtocol {
  @_Concurrency.MainActor @preconcurrency open var cellName: Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency open var headerName: Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency open var footerName: Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency open var cellHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency open var headerHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency open var footerHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency open var adapterData: CVTableViewAdapterData
  @_Concurrency.MainActor @preconcurrency open var keyPathOfSubData: Any?
  @_Concurrency.MainActor @preconcurrency open var tableViewDeselectRowAtIndexPathAnimation: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var tag: Swift.Int
  @_Concurrency.MainActor @preconcurrency weak open var controller: UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency open var canEditEnable: Swift.Bool?
  @_Concurrency.MainActor @preconcurrency open var editingStyle: UIKit.UITableViewCell.EditingStyle
  @_Concurrency.MainActor @preconcurrency open var titleForDeleteConfirmationButton: Swift.String?
  @_Concurrency.MainActor @preconcurrency open var rowActions: [UIKit.UITableViewRowAction]?
  @_Concurrency.MainActor @preconcurrency open var shouldIndentWhileEditingRow: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func obtainCellClassWithCell(_ data: Any, tableView: UIKit.UITableView, cellForRowAtIndexPath indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency open func obtainHeaderClassWithHeader(_ data: Any, tableView: UIKit.UITableView, viewForHeaderInSection section: ObjectiveC.NSInteger) -> Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency open func obtainFooterClassWithFooter(_ data: Any, tableView: UIKit.UITableView, viewForFooterInSection section: ObjectiveC.NSInteger) -> Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency open func subDataKeyPath(_ indexPath: Foundation.IndexPath, targetView: UIKit.UIScrollView) -> Any?
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc open func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, sectionForSectionIndexTitle title: Swift.String, at index: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency open func cellDataWithIndexPath(_ indexPath: Foundation.IndexPath, tableView: UIKit.UITableView) -> Any?
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency open func headerFooterDataWithType(type: CVAdapterViewType, section: ObjectiveC.NSInteger) -> Any?
  @_Concurrency.MainActor @preconcurrency open func tableview(_ tableView: UIKit.UITableView, tableViewHeaderFooterViewType type: CVAdapterViewType, viewForHeaderInSection section: ObjectiveC.NSInteger) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, willDisplayFooterView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, didEndDisplayingHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, didEndDisplayingFooterView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, titleForDeleteConfirmationButtonForRowAt indexPath: Foundation.IndexPath) -> Swift.String?
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, editActionsForRowAt indexPath: Foundation.IndexPath) -> [UIKit.UITableViewRowAction]?
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, didEndEditingRowAt indexPath: Foundation.IndexPath?)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, willBeginEditingRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, shouldIndentWhileEditingRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @available(iOS 3.2, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @available(iOS 5.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewWillBeginDecelerating(_ scrollView: UIKit.UIScrollView)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @available(iOS 3.2, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
  @available(iOS 2.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidScrollToTop(_ scrollView: UIKit.UIScrollView)
  @available(iOS 11.0, *)
  @_Concurrency.MainActor @preconcurrency @objc open func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CVRouterCoordinator {
  @discardableResult
  open class func push(_ viewController: UIKit.UIViewController, from: UIKit.UINavigationController? = nil, animated: Swift.Bool = true, removeDuplicates: Swift.Bool = false) -> UIKit.UIViewController?
  @discardableResult
  open class func pushRemoveCurrent(_ viewController: UIKit.UIViewController, from: UIKit.UINavigationController? = nil, animated: Swift.Bool = true, removeCurrent: Swift.Bool = false) -> UIKit.UIViewController?
  @discardableResult
  open class func pushAndRemove(_ viewController: UIKit.UIViewController, from: UIKit.UINavigationController? = nil, animated: Swift.Bool = true, shouldRemove: ((UIKit.UIViewController) -> Swift.Bool)? = nil) -> UIKit.UIViewController?
  @discardableResult
  open class func pop(_ animated: Swift.Bool = true, removeDuplicates: Swift.Bool = false) -> UIKit.UIViewController?
  @discardableResult
  open class func pop<T>(_ to: T.Type, animated: Swift.Bool = true) -> [UIKit.UIViewController]? where T : UIKit.UIViewController
  open class func pop(_ shouldPop: (UIKit.UIViewController) -> Swift.Bool, animated: Swift.Bool = true)
  @discardableResult
  open class func present(_ viewController: UIKit.UIViewController, from: UIKit.UIViewController? = nil, animated: Swift.Bool = true) -> UIKit.UIViewController?
  @objc deinit
}
final public class FSPopoverViewTransitionFade : FSPopoverViewAnimatedTransitioning {
  public init()
  final public func animateTransition(transitionContext context: FSPopoverViewTransitionContext)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVInputField : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var onValueChange: ((_ textField: CVInputField) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var rightViewClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var colClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var placeholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var rightText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var rightIcon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hintText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hintIcon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isError: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isTwoCol: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var colText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isSecureTextEntry: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var textAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var textFieldBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var textColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var endEditingBlock: ((UIKit.UITextField) -> Swift.Void)?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var minimumValue: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var maximumValue: Swift.Double {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var unitsText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var digits: Swift.Int?
  @_Concurrency.MainActor @preconcurrency public var maxCount: Swift.Int?
  @_Concurrency.MainActor @preconcurrency public var isOpenMaxCount: Swift.Bool
  @_Concurrency.MainActor @preconcurrency convenience public init(placeholder: Swift.String)
  @_Concurrency.MainActor @preconcurrency public var textField: CVPaddingTextField {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency public func becomeFirstResponderTextField()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension CVInputField : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
extension CVInputField {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVPaddingTextField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVBaseView : UIKit.UIView, ViewInitProtocol {
  @_Concurrency.MainActor @preconcurrency public var eventTransmissionBlock: CVEventTransmissionBlock?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func setupUI()
  @_Concurrency.MainActor @preconcurrency open func layoutUI()
  @objc deinit
}
public protocol ViewInitProtocol {
  func setupUI()
  func layoutUI()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVButton : CVStateButton {
  @_Concurrency.MainActor @preconcurrency public var cSize: CVButton.CVButtonSizeType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hierarchy: CVButton.CVButtonHierarchyType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  public enum CVButtonSizeType : Swift.CaseIterable {
    case sm
    case md
    case lg
    case xl
    case xl2
    public static func == (a: CVButton.CVButtonSizeType, b: CVButton.CVButtonSizeType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVButton.CVButtonSizeType]
    nonisolated public static var allCases: [CVButton.CVButtonSizeType] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CVButtonHierarchyType : Swift.CaseIterable {
    case primaryBrand
    case secondaryBrand
    case secondaryGray
    case tertiaryColor
    case tertiaryGray
    case errorPrimary
    case errorSecondary
    case dark
    public static func == (a: CVButton.CVButtonHierarchyType, b: CVButton.CVButtonHierarchyType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVButton.CVButtonHierarchyType]
    nonisolated public static var allCases: [CVButton.CVButtonHierarchyType] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public init(size: CVButton.CVButtonSizeType = .sm, hierarchy: CVButton.CVButtonHierarchyType = .primaryBrand)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVStateButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency open func setBackgroundColor(_ color: UIKit.UIColor, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor @preconcurrency open func setBorderColor(_ color: UIKit.UIColor, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIButton {
  public enum CVButtonImagePosition {
    case left
    case right
    case top
    case bottom
    public static func == (a: UIKit.UIButton.CVButtonImagePosition, b: UIKit.UIButton.CVButtonImagePosition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public func cvIconPosition(_ position: UIKit.UIButton.CVButtonImagePosition, _ spacing: CoreFoundation.CGFloat = 8)
  @_Concurrency.MainActor @preconcurrency public func setContentEdgeInsets(edge: UIKit.UIEdgeInsets)
}
extension UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public var extendEdgeInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVDailyTaskView : CVBaseView {
  public enum CVDailyTaskStyle : Swift.CaseIterable {
    case select
    case event
    case click
    case input
    public static func == (a: CVDailyTaskView.CVDailyTaskStyle, b: CVDailyTaskView.CVDailyTaskStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVDailyTaskView.CVDailyTaskStyle]
    nonisolated public static var allCases: [CVDailyTaskView.CVDailyTaskStyle] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum CVDailyTaskUIStyle : Swift.CaseIterable {
    case `default`
    case dark
    public static func == (a: CVDailyTaskView.CVDailyTaskUIStyle, b: CVDailyTaskView.CVDailyTaskUIStyle) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVDailyTaskView.CVDailyTaskUIStyle]
    nonisolated public static var allCases: [CVDailyTaskView.CVDailyTaskUIStyle] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var style: CVDailyTaskView.CVDailyTaskStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var uiStyle: CVDailyTaskView.CVDailyTaskUIStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selectFieldClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var clickButtonClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var coverButtonClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var iconURL: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var titleText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var detailText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var clickButtonText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selectFieldButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selectField: CVInputField {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var progressView: CVProgressBar {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var clickButton: CVButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var inputField: CVInputField {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var coverClickButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVWeekSelecter : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var stringForDate: ((Foundation.Date) -> Swift.String)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var dateSelect: ((Foundation.Date, Foundation.Date) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var previousStatus: CVWeekSelecter.CVWeekSelecterStatus {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var nextStatus: CVWeekSelecter.CVWeekSelecterStatus {
    get
    set
  }
  public enum CVWeekSelecterStatus : Swift.CaseIterable {
    case normal
    case disabled
    public static func == (a: CVWeekSelecter.CVWeekSelecterStatus, b: CVWeekSelecter.CVWeekSelecterStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [CVWeekSelecter.CVWeekSelecterStatus]
    nonisolated public static var allCases: [CVWeekSelecter.CVWeekSelecterStatus] {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var startDate: Foundation.Date? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var endDate: Foundation.Date? {
    get
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func update(startDate: Foundation.Date, endDate: Foundation.Date)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol CVSelectAble {
  var isSelected: Swift.Bool { get set }
}
extension UIKit.UIButton : CVSelectAble {
}
extension CVSelectFieldRadio : CVSelectAble {
}
extension CVDateV2 : CVSelectAble {
}
@_Concurrency.MainActor @preconcurrency public class CVSelectGroup<T, View> : CVBaseView where T : Swift.Equatable, View : UIKit.UIView, View : CVSelectAble {
  @_Concurrency.MainActor @preconcurrency public var multiSelection: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var axis: UIKit.NSLayoutConstraint.Axis {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var distribution: UIKit.UIStackView.Distribution {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var didSelect: (([T]) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var selectedValues: [T] {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var viewForT: (T) -> View
  @_Concurrency.MainActor @preconcurrency public init(options: [T] = [], selectedValues: [T] = [], viewProvider: ((T) -> View)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency public func updateOptions(_ options: [T])
  @_Concurrency.MainActor @preconcurrency public func updateValue(_ values: [T])
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVCircularProgressView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var progressColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var trackColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var progress: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var lineWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class FSPopoverListView : FSPopoverView, FSPopoverViewDataSource {
  public enum ScrollDirection {
    case vertical
    case horizontal
    public static func == (a: FSPopoverListView.ScrollDirection, b: FSPopoverListView.ScrollDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency open var scrollDirection: FSPopoverListView.ScrollDirection {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var items: [FSPopoverListItem]? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var shouldDismissOnTapOutside: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var maximumCountOfVisibleItems: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var dismissWhenSelected: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public var backgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(scrollDirection: FSPopoverListView.ScrollDirection = .vertical)
  @_Concurrency.MainActor @preconcurrency override open func reloadData()
  @_Concurrency.MainActor @preconcurrency open func backgroundView(for popoverView: FSPopoverView) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency open func contentView(for popoverView: FSPopoverView) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency open func contentSize(for popoverView: FSPopoverView) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency open func containerSafeAreaInsets(for popoverView: FSPopoverView) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency open func popoverViewShouldDismissOnTapOutside(_ popoverView: FSPopoverView) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func didSelectItem(_ item: FSPopoverListItem)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVCalendarWeekly : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var cancelClick: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var applyClick: ((_ start: Foundation.Date, _ end: Foundation.Date) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var selectedFirstDayOfWeek: Foundation.Date {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency convenience public init(minimumDate: Foundation.Date?, maximumDate: Foundation.Date?)
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CVCalendarWeekly : JTAppleCalendar.JTACMonthViewDataSource {
  @_Concurrency.MainActor @preconcurrency public func configureCalendar(_ calendar: JTAppleCalendar.JTACMonthView) -> JTAppleCalendar.ConfigurationParameters
}
extension CVCalendarWeekly : JTAppleCalendar.JTACMonthViewDelegate {
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, willDisplay cell: JTAppleCalendar.JTACDayCell, forItemAt date: Foundation.Date, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, cellForItemAt date: Foundation.Date, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath) -> JTAppleCalendar.JTACDayCell
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, didSelectDate date: Foundation.Date, cell: JTAppleCalendar.JTACDayCell?, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, didDeselectDate date: Foundation.Date, cell: JTAppleCalendar.JTACDayCell?, cellState: JTAppleCalendar.CellState, indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency public func calendar(_ calendar: JTAppleCalendar.JTACMonthView, didScrollToDateSegmentWith visibleDates: JTAppleCalendar.DateSegmentInfo)
}
@_hasMissingDesignatedInitializers final public class FSPopoverViewAppearance {
  final public var showsArrow: Swift.Bool
  final public var showsDimBackground: Swift.Bool
  final public var cornerRadius: CoreFoundation.CGFloat
  final public var arrowSize: CoreFoundation.CGSize
  final public var borderWidth: CoreFoundation.CGFloat
  final public var borderColor: UIKit.UIColor?
  final public var shadowColor: UIKit.UIColor?
  final public var shadowRadius: CoreFoundation.CGFloat
  final public var shadowOpacity: Swift.Float
  final public var shadowOffset: CoreFoundation.CGSize
  final public var backgroundColor: UIKit.UIColor?
  final public var spacing: CoreFoundation.CGFloat
  final public var textFont: UIKit.UIFont
  final public var textColor: UIKit.UIColor?
  final public var separatorInset: UIKit.UIEdgeInsets
  final public var separatorColor: UIKit.UIColor?
  final public var highlightedColor: UIKit.UIColor?
  @objc deinit
}
extension UIKit.UILabel : CVDesignTypographyExtensions {
  @_Concurrency.MainActor @preconcurrency public var lineHeight: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var letterSpacing: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var underline: UIKit.NSUnderlineStyle? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var strikethrough: UIKit.NSUnderlineStyle? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var paragraphSpacing: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var leadingImage: CVDesignTypography.Image? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var trailingImage: CVDesignTypography.Image? {
    get
    set
  }
}
public protocol CVAdapterDataProtocol {
  var cellDatas: [Any]? { get set }
  var headerDatas: [Any]? { get set }
  var footerDatas: [Any]? { get set }
  var customData: Any? { get set }
}
public protocol CVTableViewAdapterDataProtocol : CVAdapterDataProtocol {
  var indexDatas: [Swift.String]? { get set }
}
public protocol SimplifiedGetDataProtocol {
  func headerDatas() -> [Any]?
  func cellData() -> [Any]?
  func footerDatas() -> [Any]?
  func indexDatas() -> [Any]?
  func customData() -> Any?
  func controller() -> UIKit.UIViewController?
  func adapterData() -> (any CVAdapterDataProtocol)?
}
public protocol CVViewPropertyProtocol : SimplifiedGetDataProtocol {
  var eventTransmissionBlock: CVEventTransmissionBlock? { get set }
  var targetView: UIKit.UIView? { get set }
  var model: Any? { get set }
  var protocolsVMO: [ViewMappingObject]? { get set }
  var indexPath: Foundation.IndexPath? { get set }
  var section: Swift.Int? { get set }
  var type: CVAdapterViewType? { get set }
  var kind: Swift.String? { get set }
}
extension CVViewPropertyProtocol {
  public func customData() -> Any?
  public func headerDatas() -> [Any]?
  public func cellData() -> [Any]?
  public func footerDatas() -> [Any]?
  public func indexDatas() -> [Any]?
  public func controller() -> UIKit.UIViewController?
  public func adapterData() -> (any CVAdapterDataProtocol)?
}
@objc public class ViewMappingObject : ObjectiveC.NSObject {
  open var view: (any CVViewPropertyProtocol)?
  open var mapping: [CVAdapterViewType : Any?]?
  public init(view: (any CVViewPropertyProtocol)?, mapping: [CVAdapterViewType : Any]?)
  @objc deinit
}
public protocol CVViewProtocol : CVViewPropertyProtocol {
  func addAutoDistributionModel(view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  func replaceAt(index: Swift.Int, autoDistributionModel view: any CVViewProtocol, mapping: [CVAdapterViewType : Any]?)
  func removeAutoDistributionModelViewAt(index: Swift.Int)
  func removeAutoDistributionModelView()
}
public protocol CVViewLifeCycleProtocol : CVViewProtocol {
  func cellForRowAt(indexPath: Foundation.IndexPath, targetView: UIKit.UIView, model: Any, eventTransmissionBlock: CVEventTransmissionBlock?)
  func cellWillReuse(with identifier: Swift.String)
  func cellWillReuse(with identifier: Swift.String, indexPath: Foundation.IndexPath)
  func cellWillAppear()
  func cellDidDisappear()
}
public protocol CVTableViewHeaderFooterLifeCycleProtocol : CVViewProtocol {
  func headerFooter(for section: Swift.Int, in tableView: UIKit.UITableView, model: Any, type: CVAdapterViewType, eventTransmissionBlock: CVEventTransmissionBlock?)
  func headerFooterViewWillReuse(with identifier: Swift.String)
  func headerFooterViewWillAppear(with type: CVAdapterViewType)
  func headerFooterViewDidDisAppear(with type: CVAdapterViewType)
}
public protocol CVCollectionReusableViewLifeCycleProtocol : CVViewProtocol {
  func reusableView(for collectionView: UIKit.UICollectionView, indexPath: Foundation.IndexPath, kind: Swift.String, model: Any, eventTransmissionBlock: CVEventTransmissionBlock?)
  func reusableViewWillReuse(with identifier: Swift.String, indexPath: Foundation.IndexPath)
  func reusableViewWillAppear()
  func reusableViewDidDisappear()
}
@_inheritsConvenienceInitializers final public class FSPopoverListTextItem : FSPopoverListItem {
  final public var contentInset: UIKit.UIEdgeInsets
  final public var image: UIKit.UIImage?
  final public var title: Swift.String?
  final public var spacing: CoreFoundation.CGFloat
  final public var titleFont: UIKit.UIFont?
  final public var titleColor: UIKit.UIColor?
  override final public var cellType: FSPopoverListCell.Type {
    get
  }
  override public init(scrollDirection: FSPopoverListView.ScrollDirection = .vertical)
  final public func updateLayout()
  @objc deinit
}
public protocol CVSubDataOfKeyPathDelegate {
  func subDataKeyPath(_ indexPath: Foundation.IndexPath, targetView: UIKit.UIScrollView) -> Any?
}
public protocol CVHorizontalFilterProtocol {
  var cv_filter_title: Swift.String { get }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CVBadgeGroup : CVBaseView, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency public var items: [any CVHorizontalFilterProtocol] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var contentInset: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selectedFontColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var nonSelectedFontColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selectedBgColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var nonSelectedBgColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selectedBorderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var nonSelectedBorderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var defaultSelectIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var selectFilterBlock: ((any CVHorizontalFilterProtocol) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, items: [any CVHorizontalFilterProtocol], spacing: CoreFoundation.CGFloat, padding: UIKit.UIEdgeInsets, font: UIKit.UIFont = .systemFont(ofSize: 14))
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc deinit
}
extension UIKit.UILabel : CVDesignCompatible {
}
extension CVDesignWrapper where Base : UIKit.UILabel {
  public func typography(_ typography: UIKit.UILabel.CVTypography)
}
extension UIKit.UILabel {
  public enum CVTypography {
    case display_2xl_regular
    case display_2xl_medium
    case display_2xl_semibold
    case display_2xl_bold
    case display_xl_regular
    case display_xl_medium
    case display_xl_semibold
    case display_xl_bold
    case display_lg_regular
    case display_lg_medium
    case display_lg_semibold
    case display_lg_bold
    case display_md_regular
    case display_md_medium
    case display_md_semibold
    case display_md_bold
    case display_sm_regular
    case display_sm_medium
    case display_sm_semibold
    case display_sm_bold
    case display_xs_regular
    case display_xs_medium
    case display_xs_semibold
    case display_xs_bold
    case text_xl_regular
    case text_xl_medium
    case text_xl_semibold
    case text_xl_bold
    case text_lg_regular
    case text_lg_medium
    case text_lg_semibold
    case text_lg_bold
    case text_md_regular
    case text_md_medium
    case text_md_semibold
    case text_md_bold
    case text_sm_regular
    case text_sm_medium
    case text_sm_semibold
    case text_sm_bold
    case text_xs_regular
    case text_xs_medium
    case text_xs_semibold
    case text_xs_bold
    case text_2xs_regular
    case text_2xs_medium
    case text_2xs_semibold
    case text_2xs_bold
    public static func == (a: UIKit.UILabel.CVTypography, b: UIKit.UILabel.CVTypography) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension UIKit.UILabel.CVTypography {
  public var size: CoreFoundation.CGFloat {
    get
  }
  public var lineHeight: CoreFoundation.CGFloat {
    get
  }
  public var letterSpacing: CoreFoundation.CGFloat {
    get
  }
  public var font: UIKit.UIFont {
    get
  }
}
public protocol CVCollectionViewCellModelProtocol {
  func cellClass(collectionView: UIKit.UICollectionView, at indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  func cellItemSize(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
extension CVCollectionViewCellModelProtocol {
  public func cellItemSize(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
}
public protocol CVCollectionViewSupplementaryElementModelProtocol {
  func reusableView(collectionView: UIKit.UICollectionView, supplementaryElementOfKind kind: Swift.String, atIndexPath indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  func sectionInset(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  func minimumLineSpacing(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, atSection section: Swift.Int) -> CoreFoundation.CGFloat
  func minimumInteritemSpacingCollectionView(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, atSection section: Swift.Int) -> CoreFoundation.CGFloat
  func referenceHeaderSize(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, atSection section: Swift.Int) -> CoreFoundation.CGSize
  func referenceFooterSize(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, atSection section: Swift.Int) -> CoreFoundation.CGSize
  func subDataKeyPath(_ indexPath: Foundation.IndexPath, inCollectionView collectionView: UIKit.UICollectionView) -> Any
}
extension CVCollectionViewSupplementaryElementModelProtocol {
  public func sectionInset(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  public func minimumLineSpacing(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, atSection section: Swift.Int) -> CoreFoundation.CGFloat
  public func minimumInteritemSpacingCollectionView(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, atSection section: Swift.Int) -> CoreFoundation.CGFloat
  public func referenceHeaderSize(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, atSection section: Swift.Int) -> CoreFoundation.CGSize
  public func referenceFooterSize(collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, atSection section: Swift.Int) -> CoreFoundation.CGSize
  public func subDataKeyPath(_ indexPath: Foundation.IndexPath, inCollectionView collectionView: UIKit.UICollectionView) -> Any
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CVSimpleCollectionViewAdapter : CVCollectionViewAdapter {
  @_Concurrency.MainActor @preconcurrency override open func obtainCellClassWithCell(_ data: Any, collectionView: UIKit.UICollectionView, cellForItemAtIndexPath indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency override open func obtainSupplementaryElementClassWithCell(_ data: Any, collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Foundation.NSString, indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForFooterInSection section: Swift.Int) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency override open func subDataKeyPath(_ indexPath: Foundation.IndexPath, targetView: UIKit.UIScrollView) -> Any?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVSleepTrackWeekly : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var enterClick: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var dailyClick: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var weeklyClick: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var topHeaderText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var descriptionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var buttonText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var bottomHeaderText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setIcons(images: [UIKit.UIImage], values: [Swift.String], details: [Swift.String])
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class FSPopoverViewTransitionTranslate : FSPopoverViewAnimatedTransitioning {
  public init()
  final public func animateTransition(transitionContext context: FSPopoverViewTransitionContext)
  @objc deinit
}
public enum CVGoalType : Swift.CaseIterable {
  case uncompleted
  case completed
  case underWay
  case notStarted
  public static func == (a: CVGoalType, b: CVGoalType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [CVGoalType]
  nonisolated public static var allCases: [CVGoalType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class CVGoalCircularProgressView : CVBaseView {
  @_Concurrency.MainActor @preconcurrency public var progressColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var trackColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var progress: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var type: CVGoalType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override public func setupUI()
  @_Concurrency.MainActor @preconcurrency override public func layoutUI()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CVGoalTaskStatusType : Swift.Equatable {}
extension CVGoalTaskStatusType : Swift.Hashable {}
extension CVAudioTrackCardType1_TypeLabel.CVAudioTrackCardType1_TypeLabelType : Swift.Equatable {}
extension CVAudioTrackCardType1_TypeLabel.CVAudioTrackCardType1_TypeLabelType : Swift.Hashable {}
extension CVAudioTrackCardType1_TypeLabel.CVAudioTrackCardType1_TypeLabelType : Swift.RawRepresentable {}
extension CVSelectFieldRadio.CVSelectFieldIconPosition : Swift.Equatable {}
extension CVSelectFieldRadio.CVSelectFieldIconPosition : Swift.Hashable {}
extension CVSelectFieldRadio.CVSelectFieldIconSize : Swift.Equatable {}
extension CVSelectFieldRadio.CVSelectFieldIconSize : Swift.Hashable {}
extension CVSelectFieldRadio.CVSelectFieldRadiusSize : Swift.Equatable {}
extension CVSelectFieldRadio.CVSelectFieldRadiusSize : Swift.Hashable {}
extension CVAdapterViewType : Swift.Equatable {}
extension CVAdapterViewType : Swift.Hashable {}
extension CVAdapterViewType : Swift.RawRepresentable {}
extension SelectionModeType : Swift.Equatable {}
extension SelectionModeType : Swift.Hashable {}
extension CVThemeType : Swift.Equatable {}
extension CVThemeType : Swift.Hashable {}
extension CVThemeType : Swift.RawRepresentable {}
extension CVProgressBar.CVProgressBarLineCap : Swift.Equatable {}
extension CVProgressBar.CVProgressBarLineCap : Swift.Hashable {}
extension CVProgressBar.CVProgressBarLabelStyle : Swift.Equatable {}
extension CVProgressBar.CVProgressBarLabelStyle : Swift.Hashable {}
extension CVCountdownTimeView.CVCountdownTimeViewStyle : Swift.Equatable {}
extension CVCountdownTimeView.CVCountdownTimeViewStyle : Swift.Hashable {}
extension CVBanner.CVBannerIconPosition : Swift.Equatable {}
extension CVBanner.CVBannerIconPosition : Swift.Hashable {}
extension CVCheckBox.CVCheckBoxSizeType : Swift.Equatable {}
extension CVCheckBox.CVCheckBoxSizeType : Swift.Hashable {}
extension CVCheckBox.CVCheckBoxSizeType : Swift.RawRepresentable {}
extension CVMyGoalTagType : Swift.Equatable {}
extension CVMyGoalTagType : Swift.Hashable {}
extension PointsProgressPatternType : Swift.Equatable {}
extension PointsProgressPatternType : Swift.Hashable {}
extension CVToastType : Swift.Equatable {}
extension CVToastType : Swift.Hashable {}
extension CVTooltip.CVTipsArrowDirection : Swift.Equatable {}
extension CVTooltip.CVTipsArrowDirection : Swift.Hashable {}
extension CVToggle.CVToggleSizeType : Swift.Equatable {}
extension CVToggle.CVToggleSizeType : Swift.Hashable {}
extension CVToggle.CVToggleStateType : Swift.Equatable {}
extension CVToggle.CVToggleStateType : Swift.Hashable {}
extension FSPopoverListItem.ReloadType : Swift.Equatable {}
extension FSPopoverListItem.ReloadType : Swift.Hashable {}
extension FSPopoverListItem.SelectionStyle : Swift.Equatable {}
extension FSPopoverListItem.SelectionStyle : Swift.Hashable {}
extension CVDailyTaskStatus : Swift.Equatable {}
extension CVDailyTaskStatus : Swift.Hashable {}
extension CVDailyTaskStyle : Swift.Equatable {}
extension CVDailyTaskStyle : Swift.Hashable {}
extension CVDailyTaskType2Style : Swift.Equatable {}
extension CVDailyTaskType2Style : Swift.Hashable {}
extension CVBadge.CVBadgeSizeType : Swift.Equatable {}
extension CVBadge.CVBadgeSizeType : Swift.Hashable {}
extension CVBadge.CVBadgeHierarchyType : Swift.Equatable {}
extension CVBadge.CVBadgeHierarchyType : Swift.Hashable {}
extension CVSelectField.CVSelectFieldCheckBoxStyle : Swift.Equatable {}
extension CVSelectField.CVSelectFieldCheckBoxStyle : Swift.Hashable {}
extension CVPagination.CVPaginationSize : Swift.Equatable {}
extension CVPagination.CVPaginationSize : Swift.Hashable {}
extension CVPagination.CVPaginationStyle : Swift.Equatable {}
extension CVPagination.CVPaginationStyle : Swift.Hashable {}
extension CVPagination.CVPaginationColor : Swift.Equatable {}
extension CVPagination.CVPaginationColor : Swift.Hashable {}
extension CVCollectionViewAdapter : Swift.Sendable {}
extension CVDateV2.CVDateV2Style : Swift.Equatable {}
extension CVDateV2.CVDateV2Style : Swift.Hashable {}
extension CVDateV2.CVDateV2Type : Swift.Equatable {}
extension CVDateV2.CVDateV2Type : Swift.Hashable {}
extension CVTableViewAdapter : Swift.Sendable {}
extension CVButton.CVButtonSizeType : Swift.Equatable {}
extension CVButton.CVButtonSizeType : Swift.Hashable {}
extension CVButton.CVButtonHierarchyType : Swift.Equatable {}
extension CVButton.CVButtonHierarchyType : Swift.Hashable {}
extension UIKit.UIButton.CVButtonImagePosition : Swift.Equatable {}
extension UIKit.UIButton.CVButtonImagePosition : Swift.Hashable {}
extension CVDailyTaskView.CVDailyTaskStyle : Swift.Equatable {}
extension CVDailyTaskView.CVDailyTaskStyle : Swift.Hashable {}
extension CVDailyTaskView.CVDailyTaskUIStyle : Swift.Equatable {}
extension CVDailyTaskView.CVDailyTaskUIStyle : Swift.Hashable {}
extension CVWeekSelecter.CVWeekSelecterStatus : Swift.Equatable {}
extension CVWeekSelecter.CVWeekSelecterStatus : Swift.Hashable {}
extension FSPopoverListView.ScrollDirection : Swift.Equatable {}
extension FSPopoverListView.ScrollDirection : Swift.Hashable {}
extension UIKit.UILabel.CVTypography : Swift.Equatable {}
extension UIKit.UILabel.CVTypography : Swift.Hashable {}
extension CVGoalType : Swift.Equatable {}
extension CVGoalType : Swift.Hashable {}
